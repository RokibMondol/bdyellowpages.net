P_dt = data.frame(n=1:20) %>% mutate(P=((1-p)^(n-1))*p)
View(P_dt)
ggplot(P_dt, aes(n,P))+geom_line()+geom_point(color="darkred")
ggplot(P_dt, aes(n,P))+geom_line()+geom_point(color="darkred") %>% ggplotly
ggplot(P_dt, aes(n,P))+geom_line()+geom_point(color="darkred") %>% ggplotly(.)
ggplot(P_dt, aes(n,P))+geom_line()+geom_point(color="darkred") -> p_plot
ggplotly(p_plot)
# Yellow Page Plumbers Data Scrape for canadian website
pacman::p_load(tidyverse,rvest, curl,robotstxt, lubridate)
# setting up progress bar
n_page <- 42
pb <- txtProgressBar(min = 0,
max = n_page,
style = 3,
width = n_page, # Needed to avoid multiple printings
char = "=")
init <- numeric(n_page)
end <- numeric(n_page)
plumbers_in_toronto = data.frame()
for(page_ind in 1:n_page){
# setting progress start
init[page_ind] <- Sys.time()
#-----------------------------------------------------------------------------------------------------------
link = "https://www.yellowpages.ca/search/si/2/plumber/Toronto+ON"
#page_ind= 1:n_page
# link = str_glue("https://www.yellowpages.ca/search/si/{page_ind}/plumber/Toronto+ON")
page = read_html(curl(link,
handle = curl::new_handle("useragent" = "Mozilla/5.0")))
plumbers_in_toronto = rbind(
plumbers_in_toronto,
data.frame(
company = page %>% html_elements(".jsListingName") %>% html_text() ,
phone   = page %>% html_elements(".mlr--listing-left") %>% html_text() %>%
str_match("(?:Call|Phone\\sNumber)\\n\\n([-\\d]+(?:\\n\\n[-\\d]+)?)") %>% .[,2] %>%
str_replace("\\n\\n",", ") ,
website = page %>% html_elements(".mlr--listing-left") %>%
as.character() %>%
str_match("redirect=https?%3A%2F%2F(.+\\..+)%2F..") %>% .[,2] %>%
str_replace_all(pattern = "%2F",
replacement = "/"),
streetAddress = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("streetAddress.>(.+?)<.span>") %>% .[,2],
district      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressLocality\">(.+?)<") %>% .[,2],
province      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressRegion\">(.+?)<") %>% .[,2],
postal_code  = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("postalCode\">(.+?)<") %>% .[,2],
listing_headings = page %>% html_elements(".listing_right_top_section") %>%
as.character()%>%
str_match("listing__headings.><.+?>(.+?)<.a>") %>% .[,2] %>%
str_replace_all("&amp;","&"),
listing_captex = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__captext.>(.+?)<.div>") %>% .[,2] %>%
str_replace_all(pattern ="&amp", replacement = "&"),
listing_details =str_glue("{listing_details_whole[,2]}{listing_details_whole[,3]}",
listing_details_whole = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__details__teaser.+?description.>\\n(.+?)<span.+?>(.+?)<\\/span>"))
))
#-----------------------------------------------------------------------------------------------------------------------
end[page_ind] <- Sys.time()
setTxtProgressBar(pb, page_ind)
time <- round(seconds_to_period(sum(end - init)), 0)
# Estimated remaining time based on the
# mean time that took to run the previous iterations
est <- n_page * (mean(end[end != 0] - init[init != 0])) - time
remainining <- round(seconds_to_period(est), 0)
cat(str_glue("  Page No: {page_ind} out of {n_page}  |  Execution time: {time}   |  Estimated time remaining: {remainining}"))
}
View(plumbers_in_toronto)
write_csv(plumbers_in_toronto,"plumbers_in_toronto")
page_ind
View(plumbers_in_toronto)
pacman::p_load(tidyverse,rvest, curl,robotstxt, lubridate)
#link_1 = "https://www.yellowpages.ca/search/si/1/plumber/Toronto+ON"
#link_2 = "https://www.yellowpages.ca/search/si/2/plumber/Toronto+ON"
# setting up progress bar
n_page <- 42
pb <- txtProgressBar(min = 0,
max = n_page,
style = 3,
width = n_page, # Needed to avoid multiple printings
char = "=")
init <- numeric(n_page)
end <- numeric(n_page)
plumbers_in_toronto = data.frame()
for(page_ind in 1:n_page){
# setting progress start
init[page_ind] <- Sys.time()
#-----------------------------------------------------------------------------------------------------------
#link = "https://www.yellowpages.ca/search/si/2/plumber/Toronto+ON"
page_ind= 1:n_page
link = str_glue("https://www.yellowpages.ca/search/si/{page_ind}/plumber/Toronto+ON")
page = read_html(curl(link,
handle = curl::new_handle("useragent" = "Mozilla/5.0")))
plumbers_in_toronto = rbind(
plumbers_in_toronto,
data.frame(
company = page %>% html_elements(".jsListingName") %>% html_text() ,
phone   = page %>% html_elements(".mlr--listing-left") %>% html_text() %>%
str_match("(?:Call|Phone\\sNumber)\\n\\n([-\\d]+(?:\\n\\n[-\\d]+)?)") %>% .[,2] %>%
str_replace("\\n\\n",", ") ,
website = page %>% html_elements(".mlr--listing-left") %>%
as.character() %>%
str_match("redirect=https?%3A%2F%2F(.+\\..+)%2F..") %>% .[,2] %>%
str_replace_all(pattern = "%2F",
replacement = "/"),
streetAddress = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("streetAddress.>(.+?)<.span>") %>% .[,2],
district      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressLocality\">(.+?)<") %>% .[,2],
province      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressRegion\">(.+?)<") %>% .[,2],
postal_code  = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("postalCode\">(.+?)<") %>% .[,2],
listing_headings = page %>% html_elements(".listing_right_top_section") %>%
as.character()%>%
str_match("listing__headings.><.+?>(.+?)<.a>") %>% .[,2] %>%
str_replace_all("&amp;","&"),
listing_captex = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__captext.>(.+?)<.div>") %>% .[,2] %>%
str_replace_all(pattern ="&amp", replacement = "&"),
listing_details =str_glue("{listing_details_whole[,2]}{listing_details_whole[,3]}",
listing_details_whole = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__details__teaser.+?description.>\\n(.+?)<span.+?>(.+?)<\\/span>"))
))
#-----------------------------------------------------------------------------------------------------------------------
end[page_ind] <- Sys.time()
setTxtProgressBar(pb, page_ind)
time <- round(seconds_to_period(sum(end - init)), 0)
# Estimated remaining time based on the
# mean time that took to run the previous iterations
est <- n_page * (mean(end[end != 0] - init[init != 0])) - time
remainining <- round(seconds_to_period(est), 0)
cat(str_glue("  Page No: {page_ind} out of {n_page}  |  Execution time: {time}   |  Estimated time remaining: {remainining}"))
}
n_page
str_glue("https://www.yellowpages.ca/search/si/{page_ind}/plumber/Toronto+ON")
n_page <- 42
pb <- txtProgressBar(min = 0,
max = n_page,
style = 3,
width = n_page, # Needed to avoid multiple printings
char = "=")
init <- numeric(n_page)
end <- numeric(n_page)
plumbers_in_toronto = data.frame()
for(page_ind in 1:n_page){
# setting progress start
init[page_ind] <- Sys.time()
#-----------------------------------------------------------------------------------------------------------
#link = "https://www.yellowpages.ca/search/si/2/plumber/Toronto+ON"
#page_ind= 1:n_page
link = str_glue("https://www.yellowpages.ca/search/si/{page_ind}/plumber/Toronto+ON")
page = read_html(curl(links,
handle = curl::new_handle("useragent" = "Mozilla/5.0")))
plumbers_in_toronto = rbind(
plumbers_in_toronto,
data.frame(
company = page %>% html_elements(".jsListingName") %>% html_text() ,
phone   = page %>% html_elements(".mlr--listing-left") %>% html_text() %>%
str_match("(?:Call|Phone\\sNumber)\\n\\n([-\\d]+(?:\\n\\n[-\\d]+)?)") %>% .[,2] %>%
str_replace("\\n\\n",", ") ,
website = page %>% html_elements(".mlr--listing-left") %>%
as.character() %>%
str_match("redirect=https?%3A%2F%2F(.+\\..+)%2F..") %>% .[,2] %>%
str_replace_all(pattern = "%2F",
replacement = "/"),
streetAddress = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("streetAddress.>(.+?)<.span>") %>% .[,2],
district      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressLocality\">(.+?)<") %>% .[,2],
province      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressRegion\">(.+?)<") %>% .[,2],
postal_code  = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("postalCode\">(.+?)<") %>% .[,2],
listing_headings = page %>% html_elements(".listing_right_top_section") %>%
as.character()%>%
str_match("listing__headings.><.+?>(.+?)<.a>") %>% .[,2] %>%
str_replace_all("&amp;","&"),
listing_captex = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__captext.>(.+?)<.div>") %>% .[,2] %>%
str_replace_all(pattern ="&amp", replacement = "&"),
listing_details =str_glue("{listing_details_whole[,2]}{listing_details_whole[,3]}",
listing_details_whole = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__details__teaser.+?description.>\\n(.+?)<span.+?>(.+?)<\\/span>"))
))
#-----------------------------------------------------------------------------------------------------------------------
end[page_ind] <- Sys.time()
setTxtProgressBar(pb, page_ind)
time <- round(seconds_to_period(sum(end - init)), 0)
# Estimated remaining time based on the
# mean time that took to run the previous iterations
est <- n_page * (mean(end[end != 0] - init[init != 0])) - time
remainining <- round(seconds_to_period(est), 0)
cat(str_glue("  Page No: {page_ind} out of {n_page}  |  Execution time: {time}   |  Estimated time remaining: {remainining}"))
}
n_page <- 42
pb <- txtProgressBar(min = 0,
max = n_page,
style = 3,
width = n_page, # Needed to avoid multiple printings
char = "=")
init <- numeric(n_page)
end <- numeric(n_page)
plumbers_in_toronto = data.frame()
for(page_ind in 1:n_page){
# setting progress start
init[page_ind] <- Sys.time()
#-----------------------------------------------------------------------------------------------------------
#link = "https://www.yellowpages.ca/search/si/2/plumber/Toronto+ON"
#page_ind= 1:n_page
link = str_glue("https://www.yellowpages.ca/search/si/{page_ind}/plumber/Toronto+ON")
page = read_html(curl(link,
handle = curl::new_handle("useragent" = "Mozilla/5.0")))
plumbers_in_toronto = rbind(
plumbers_in_toronto,
data.frame(
company = page %>% html_elements(".jsListingName") %>% html_text() ,
phone   = page %>% html_elements(".mlr--listing-left") %>% html_text() %>%
str_match("(?:Call|Phone\\sNumber)\\n\\n([-\\d]+(?:\\n\\n[-\\d]+)?)") %>% .[,2] %>%
str_replace("\\n\\n",", ") ,
website = page %>% html_elements(".mlr--listing-left") %>%
as.character() %>%
str_match("redirect=https?%3A%2F%2F(.+\\..+)%2F..") %>% .[,2] %>%
str_replace_all(pattern = "%2F",
replacement = "/"),
streetAddress = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("streetAddress.>(.+?)<.span>") %>% .[,2],
district      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressLocality\">(.+?)<") %>% .[,2],
province      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressRegion\">(.+?)<") %>% .[,2],
postal_code  = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("postalCode\">(.+?)<") %>% .[,2],
listing_headings = page %>% html_elements(".listing_right_top_section") %>%
as.character()%>%
str_match("listing__headings.><.+?>(.+?)<.a>") %>% .[,2] %>%
str_replace_all("&amp;","&"),
listing_captex = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__captext.>(.+?)<.div>") %>% .[,2] %>%
str_replace_all(pattern ="&amp", replacement = "&"),
listing_details =str_glue("{listing_details_whole[,2]}{listing_details_whole[,3]}",
listing_details_whole = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__details__teaser.+?description.>\\n(.+?)<span.+?>(.+?)<\\/span>"))
))
#-----------------------------------------------------------------------------------------------------------------------
end[page_ind] <- Sys.time()
setTxtProgressBar(pb, page_ind)
time <- round(seconds_to_period(sum(end - init)), 0)
# Estimated remaining time based on the
# mean time that took to run the previous iterations
est <- n_page * (mean(end[end != 0] - init[init != 0])) - time
remainining <- round(seconds_to_period(est), 0)
cat(str_glue("  Page No: {page_ind} out of {n_page}  |  Execution time: {time}   |  Estimated time remaining: {remainining}"))
}
source("~/R/Workshop/Web_ Scrapping/yellow pages/yellow_pages_ca_plumbers/yellow_page_ca_plubers_data.R", echo=TRUE)
View(plumbers_in_toronto)
write.csv(plumbers_in_toronto,"plumbers_in_toronto.csv")
View(plumbers_in_toronto)
duplicated(plumbers_in_toronto)
duplicated(plumbers_in_toronto) |> sum()
!duplicated(plumbers_in_toronto) |> sum()
!duplicated(plumbers_in_toronto)
sum(!duplicated(plumbers_in_toronto))
plumbers_in_toronto =plumbers_in_toronto[!duplicated(plumbers_in_toronto)]
plumbers_in_toronto =plumbers_in_toronto[!duplicated(plumbers_in_toronto),]
View(plumbers_in_toronto)
write.csv(plumbers_in_toronto,"plumbers_in_toronto.csv")
knitr::opts_chunk$set(echo = TRUE)
# Uncomment the next lines (remove the first #) to install the packages
# install.packages(packages)
# remotes::install_github("hrbrmstr/hrbrthemes")
# Load standard packages
library(ggplot2)
data("faithful")
# Basic scatterplot
ggplot(data = faithful,
mapping = aes(x = eruptions, y = waiting)) +
geom_point()
# Data and mapping can be given both as global (in ggplot()) or per layer
ggplot() +
geom_point(mapping = aes(x = eruptions, y = waiting),
data = faithful)
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting, colour = eruptions < 3))
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting),
colour = 'steelblue')
ggplot(faithful) +
geom_histogram(aes(x = eruptions))
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_density_2d() +
geom_point()
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting))
geom_histogram(aes(x = eruptions))
ggplot(faithful) +
geom_histogram(aes(x = eruptions))
ggplot(faithful) +
geom_histogram(aes(x = eruptions))
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting))
```
ggplot(mpg) +
geom_bar(aes(x = class))
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
mpg_counted <- mpg %>%
count(class, name = 'count')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
ggplot(mpg_counted) +
geom_col(aes(x = class, y = count))
ggplot(mpg) +
geom_bar(aes(x = class, y = after_stat(100 * count / sum(count))))
ggplot(mpg) +
geom_density(aes(x = hwy))
ggplot(mpg) +
geom_density(aes(x = hwy, y = after_stat(scaled)))
ggplot(mpg) +
geom_bar(aes(x = class))
ggplot(mpg) +
geom_jitter(aes(x = class, y = hwy), width = 0.2)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class)) +
scale_colour_brewer(type = 'qual')
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
scale_x_continuous(breaks = c(3, 5, 6)) +
scale_y_continuous(trans = 'log10')
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class)) +
scale_colour_brewer(type = 'qual')
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class)) +
scale_colour_brewer(type = 'qual')
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class, size = cty))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = cty, size = cty))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = cty, size = cty))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(year ~ drv)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~ drv)
ggplot(mpg) +
geom_bar(aes(y = manufacturer)) +
facet_grid(class ~ .)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(year ~ drv)
ggplot(mpg) +
geom_bar(aes(x = class)) +
coord_polar()
ggplot(mpg) +
geom_bar(aes(x = class)) +
coord_polar(theta = 'y') +
expand_limits(y = 70)
ggplot(mpg) +
geom_bar(aes(x = class)) +
scale_y_continuous(limits = c(0, 40))
ggplot(mpg) +
geom_bar(aes(x = class)) +
coord_cartesian(ylim = c(0, 40))
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ))
world <- sf::st_as_sf(maps::map('world', plot = FALSE, fill = TRUE))
packages <- c(
'ggplot2',
'ggrepel',
'patchwork',
'ggraph',
'dplyr',
'gganimate',
'gifski',
'ggforce',
'ggthemes',
'maps',
'sf',
'tidyr',
'concaveman',
'remotes'
# Uncomment the next lines (remove the first #) to install the packages
install.packages(packages)
# Uncomment the next lines (remove the first #) to install the packages
install.packages(packages)
packages <- c(
'ggplot2',
'ggrepel',
'patchwork',
'ggraph',
'dplyr',
'gganimate',
'gifski',
'ggforce',
'ggthemes',
'maps',
'sf',
'tidyr',
'concaveman',
'remotes'
)
# U
# Uncomment the next lines (remove the first #) to install the packages
install.packages(packages)
install.packages(packages)
# Yellow Page Plumbers Data Scrape for canadian website
pacman::p_load(tidyverse,rvest, curl,robotstxt, lubridate)
# setting up progress bar
n_page <- 42
pb <- txtProgressBar(min = 0,
max = n_page,
style = 3,
width = n_page, # Needed to avoid multiple printings
char = "=")
init <- numeric(n_page)
end <- numeric(n_page)
plumbers_in_toronto = data.frame()
for(page_ind in 1:n_page){
# setting progress start
init[page_ind] <- Sys.time()
#-----------------------------------------------------------------------------------------------------------
#link = "https://www.yellowpages.ca/search/si/2/plumber/Toronto+ON"
#page_ind= 1:n_page
link = str_glue("https://www.yellowpages.ca/search/si/{page_ind}/plumber/Toronto+ON")
page = read_html(curl(link,
handle = curl::new_handle("useragent" = "Mozilla/5.0")))
plumbers_in_toronto = rbind(
plumbers_in_toronto,
data.frame(
company = page %>% html_elements(".jsListingName") %>% html_text() ,
phone   = page %>% html_elements(".mlr--listing-left") %>% html_text() %>%
str_match("(?:Call|Phone\\sNumber)\\n\\n([-\\d]+(?:\\n\\n[-\\d]+)?)") %>% .[,2] %>%
str_replace("\\n\\n",", ") ,
website = page %>% html_elements(".mlr--listing-left") %>%
as.character() %>%
str_match("redirect=https?%3A%2F%2F(.+\\..+)%2F..") %>% .[,2] %>%
str_replace_all(pattern = "%2F",
replacement = "/"),
streetAddress = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("streetAddress.>(.+?)<.span>") %>% .[,2],
district      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressLocality\">(.+?)<") %>% .[,2],
province      = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("addressRegion\">(.+?)<") %>% .[,2],
postal_code  = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("postalCode\">(.+?)<") %>% .[,2],
listing_headings = page %>% html_elements(".listing_right_top_section") %>%
as.character()%>%
str_match("listing__headings.><.+?>(.+?)<.a>") %>% .[,2] %>%
str_replace_all("&amp;","&"),
listing_captex = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__captext.>(.+?)<.div>") %>% .[,2] %>%
str_replace_all(pattern ="&amp", replacement = "&"),
listing_details =str_glue("{listing_details_whole[,2]}{listing_details_whole[,3]}",
listing_details_whole = page %>% html_elements(".listing_right_top_section") %>%
as.character() %>%
str_match("listing__details__teaser.+?description.>\\n(.+?)<span.+?>(.+?)<\\/span>"))
))
#-----------------------------------------------------------------------------------------------------------------------
end[page_ind] <- Sys.time()
setTxtProgressBar(pb, page_ind)
time <- round(seconds_to_period(sum(end - init)), 0)
# Estimated remaining time based on the
# mean time that took to run the previous iterations
est <- n_page * (mean(end[end != 0] - init[init != 0])) - time
remainining <- round(seconds_to_period(est), 0)
cat(str_glue("  Page No: {page_ind} out of {n_page}  |  Execution time: {time}   |  Estimated time remaining: {remainining}"))
}
View(plumbers_in_toronto)
plumbers_in_toronto =plumbers_in_toronto[!duplicated(plumbers_in_toronto),]
View(plumbers_in_toronto)
